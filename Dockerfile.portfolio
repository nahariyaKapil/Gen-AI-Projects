# Production-ready multi-stage Dockerfile with security hardening
# Stage 1: Build stage with development dependencies
FROM python:3.11-slim as builder

# Security: Create non-root user early
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies securely
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements-portfolio.txt .
RUN pip install --no-deps --requirement requirements-portfolio.txt

# Stage 2: Production stage
FROM python:3.11-slim as production

# Security labels
LABEL security.scan="enabled" \
      maintainer="security@company.com" \
      version="1.0.0"

# Security: Update packages and install only essential runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Security: Create non-root user and group
RUN groupadd -r -g 1001 appuser && \
    useradd -r -u 1001 -g appuser -d /app -s /sbin/nologin appuser

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory and create necessary directories
WORKDIR /app
RUN mkdir -p /app/logs /app/tmp \
    && chown -R appuser:appuser /app

# Copy application code
COPY --chown=appuser:appuser portfolio-app/ ./

# Security: Remove unnecessary files and set proper permissions
RUN find /app -type f -name "*.pyc" -delete \
    && find /app -type d -name "__pycache__" -exec rm -rf {} + \
    && chmod -R 755 /app \
    && chmod 644 /app/*.py

# Security: Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PORT=8080 \
    HOST=0.0.0.0 \
    ENV=production \
    LOG_LEVEL=INFO

# Security: Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose only necessary port
EXPOSE 8080

# Use exec form for better signal handling
CMD ["python", "main.py"] 