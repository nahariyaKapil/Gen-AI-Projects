version: '3.8'

# üê≥ PRODUCTION DOCKER COMPOSE
# For local production testing and development

services:
  # ü§ñ RAG Knowledge Assistant
  rag-assistant:
    build:
      context: ../01-rag-knowledge-assistant
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:YOUR_DB_PASSWORD@postgres:5432/rag_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - rag_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîÑ Self-Healing Workflow
  workflow-system:
    build:
      context: ../02-self-healing-llm-workflow
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:YOUR_DB_PASSWORD@postgres:5432/workflow_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - workflow_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üíª Code LLM Assistant
  code-assistant:
    build:
      context: ../03-code-llm-assistant
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:YOUR_DB_PASSWORD@postgres:5432/code_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - code_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä Benchmark Dashboard
  benchmark-dashboard:
    build:
      context: ../04-llm-benchmark-dashboard
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:YOUR_DB_PASSWORD@postgres:5432/benchmark_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - benchmark_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üåç Multilingual Enterprise AI
  multilingual-ai:
    build:
      context: ../05-multilingual-enterprise-ai
      dockerfile: Dockerfile
    ports:
      - "8085:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:YOUR_DB_PASSWORD@postgres:5432/multilingual_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - multilingual_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: genai_portfolio
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: YOUR_DB_PASSWORD
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ‚ö° Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üìä Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # üìà Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=YOUR_ADMIN_PASSWORD
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources

  # üåê Load Balancer - Nginx
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - rag-assistant
      - workflow-system
      - code-assistant
      - benchmark-dashboard
      - multilingual-ai
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  rag_data:
  workflow_data:
  code_data:
  benchmark_data:
  multilingual_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge 